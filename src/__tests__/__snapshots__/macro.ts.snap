// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen/macro as jsx with tag: as jsx with tag 1`] = `

const Codegen = require('./helpers/codegen.macro')
const ui = (
  <Codegen>{\`module.exports = '<div>Hello</div>'\`}</Codegen>
)

      ↓ ↓ ↓ ↓ ↓ ↓

const ui = <div>Hello</div>


`;

exports[`codegen/macro as jsx: as jsx 1`] = `

const Codegen = require('./helpers/codegen.macro')
const ui = (
  <Codegen>{"module.exports = '<div>Hi</div>'"}</Codegen>
)

      ↓ ↓ ↓ ↓ ↓ ↓

const ui = <div>Hi</div>


`;

exports[`codegen/macro invalid usage: as fn argument: invalid usage: as fn argument 1`] = `

import codegen from './helpers/codegen.macro';
var x = doSomething(codegen);

      ↓ ↓ ↓ ↓ ↓ ↓

Error: <PROJECT_ROOT>/src/__tests__/macro.ts: ./helpers/codegen.macro: codegen macro must be used as a tagged template literal, function, jsx, or .require call
  1 | import codegen from './helpers/codegen.macro';
> 2 | var x = doSomething(codegen);
    |                     ^^^^^^^

`;

exports[`codegen/macro invalid usage: missing code string: invalid usage: missing code string 1`] = `

import codegen from './helpers/codegen.macro';
var x = codegen;

      ↓ ↓ ↓ ↓ ↓ ↓

Error: <PROJECT_ROOT>/src/__tests__/macro.ts: ./helpers/codegen.macro: codegen macro must be used as a tagged template literal, function, jsx, or .require call
  1 | import codegen from './helpers/codegen.macro';
> 2 | var x = codegen;
    |         ^^^^^^^

`;

exports[`codegen/macro with a single export declaration: with a single export declaration 1`] = `

import codegen from './helpers/codegen.macro'

codegen\`module.exports = "export const a = 'a'"\`

      ↓ ↓ ↓ ↓ ↓ ↓

export const a = 'a'


`;

exports[`codegen/macro with a single import declaration: with a single import declaration 1`] = `

import codegen from './helpers/codegen.macro'

codegen\`module.exports = "import a from 'a'"\`

      ↓ ↓ ↓ ↓ ↓ ↓

import a from 'a'


`;

exports[`codegen/macro with multiple: with multiple 1`] = `

import codegen from './helpers/codegen.macro'

codegen\`module.exports = ['a', 'b', 'c'].map(l => 'export const ' + l + ' = ' + JSON.stringify(l)).join(';')\`

      ↓ ↓ ↓ ↓ ↓ ↓

export const a = 'a'
export const b = 'b'
export const c = 'c'


`;
